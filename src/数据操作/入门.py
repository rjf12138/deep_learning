import torch

'''
张量表⽰⼀个由数值组成的数组，这个数组可能有多个维度。具有⼀个轴的张量对应数学上的向量（vector）；
具有两个轴的张量对应数学上的矩阵（matrix）；具有两个轴以上的张量没有特殊的数学名称
'''

'''
我们可以使⽤ arange 创建⼀个⾏向量 x。这个⾏向量包含以0开始的前12个整数，它们默认创建为整
数。也可指定创建类型为浮点数。张量中的每个值都称为张量的 元素（element）。例如，张量 x 中有 12 个
元素。除⾮额外指定，新的张量将存储在内存中，并采⽤基于CPU的计算。
'''
x = torch.arange(12)
print(x)        # 打印张量数据

# 可以通过张量的shape属性来访问张量（沿每个轴的⻓度）的形状。
print(x.shape)

#如果只想知道张量中元素的总数，即形状的所有元素乘积，可以检查它的⼤⼩（size）
#。因为这⾥在处理的是
#⼀个向量，所以它的shape与它的size相同。
print(x.numel())

#要想改变⼀个张量的形状⽽不改变元素数量和元素值，可以调⽤reshape函数。例如，可以把张量x从形状为
#（12,）的⾏向量转换为形状为（3,4）的矩阵。这个新的张量包含与转换前相同的值，但是它被看成⼀个3⾏4列
#的矩阵。要重点说明⼀下，虽然张量的形状发⽣了改变，但其元素值并没有变。注意，通过改变张量的形状，
#张量的⼤⼩不会改变
X=x.reshape(3, 4)
print(X)

# 有时，我们希望使⽤全0、全1、其他常量，或者从特定分布中随机采样的数字来初始化矩阵。我们可以创建
# ⼀个形状为（2,3,4）的张量，其中所有元素都设置为0。
y = torch.zeros((2,3,4))
print(y)


#同样，我们可以创建⼀个形状为(2,3,4)的张量，其中所有元素都设置为1。代码如下：
Y = torch.ones((2, 3, 4))
print(Y)

# 有时我们想通过从某个特定的概率分布中随机采样来得到张量中每个元素的值。例如，当我们构造数组来作
# 为神经⽹络中的参数时，我们通常会随机初始化参数的值。以下代码创建⼀个形状为（3,4）的张量。其中的
# 每个元素都从均值为0、标准差为1的标准⾼斯分布（正态分布）中随机采样
r = torch.randn(3, 4)
print(r)

# 我们还可以通过提供包含数值的Python列表（或嵌套列表），来为所需张量中的每个元素赋予确定值。在这
# ⾥，最外层的列表对应于轴0，内层的列表对应于轴1。
R = torch.tensor([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])
print(R)